git 命令

1、git init
Initialized empty Git repository in /Users/michael/learngit/.git/
瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。
如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。
2、$ git add readme.txt   
用命令git add告诉Git，把文件添加到仓库
，可反复多次使用，添加多个文件后执行commit统一提交
你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。
3、$ git commit -m "wrote a readme file"
用命令git commit告诉Git，把文件提交到仓库
4、git status命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们，readme.txt被修改过了，但还没有准备提交的修改。
5、git diff   test1.txt顾名思义就是查看difference，用于查看文件test1.txt修改后add操作前的内容变化
git diff HEAD -- test1.txt  用于查看文件test1.txt待commit前的修改内容，即含add后的修改
6、git log命令显示从最近到最远的提交日志
git log --pretty=oneline  可以按行展示提交日志记录信息
7、git reset --hard HEAD^    当前git库回退至上一版本
用HEAD表示当前版本，也就是最新的提交版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区;
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。

8、git reset --hard 933e49f   定位回到未来的某个版本，933e49f为git log --pretty=oneline 查看版本时候的版本号一般为SHA1串的前几位？？
9、git reflog用来记录你的每一次命令及对应操作的版本号，如下第一列为每次操作版本对应的commit id 可用于定位回到指定版本
933e49f HEAD@{0}: reset: moving to 933e49f
915a2d5 HEAD@{1}: reset: moving to HEAD^
933e49f HEAD@{2}: commit: test1 add test
915a2d5 HEAD@{3}: commit: test1 add hah
b937e60 HEAD@{4}: commit: test 2 floor
3f63b7e HEAD@{5}: commit: test more file
7dd9a7e HEAD@{6}: commit (initial): 学习git使用

10、git checkout -- file可以丢弃工作区的修改：
$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")

status含#       modified:   readme.txt   工作区修改的文件可以通过git checkout -- file撤销全部修改，但是checkout无法撤销已添加（add）至缓存区的修改
即一种是readme.txt自工作区修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，在工作区又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
11、rm test2.txt 删除工作区文件，此时git status可以查看文件状态为#       deleted:    test2.txt 
现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm test2.txt 删掉，并且git commit：
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
$ git checkout -- test2.txt

git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
12、
https://github.com/gxn2013/git_learn.git
master分支用于最后使用，master以外分支用于测试，测试通过以后可以提交至master分支继续作为基线

由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录(/Users/计算机用户名/.ssh)，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
点“Add Key”，你就应该看到已经添加的Key：
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
$ eval "$(ssh-agent -s)"
Agent pid 1459   
$ ssh-add -l -E md5
The agent has no identities.
$  ssh-add ~/.ssh/id_rsa
Identity added: /Users/用户名/.ssh/id_rsa
$ ssh-add -l -E md5
2048 MD5:39:0f:3a:9e:c0:55:cd:14:bb:28:b7:ab:ee:fd:20:00 /Users/用户名/.ssh/id_rsa (RSA)
13、
添加远程库

现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。
首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
￼
在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
￼
目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：
$ git remote add origin git@github.com:gxn2013/git_learn.git
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
下一步，就可以把本地库的所有内容推送到远程库上：
$ git push -u origin master
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：
从现在起，只要本地作了提交，就可以通过命令：
$ git push origin master
把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！
